import os


Import('root_env')

env = root_env.Clone()

env.Append(CPPPATH=['#/src'])

# Generate a static library.
base = SConscript(os.path.join('base', 'SConscript'), exports=['env'])
build_blocks = SConscript(os.path.join('build_blocks', 'SConscript'), exports=['env'])
critical = SConscript(os.path.join('critical', 'SConscript'), exports=['env'])
critical_blocks = SConscript(os.path.join('critical_blocks', 'SConscript'), exports=['env'])
db = SConscript(os.path.join('db', 'SConscript'), exports=['env'])
execution = SConscript(os.path.join('execution', 'SConscript'), exports=['env'])
execution_blocks = SConscript(os.path.join('execution_blocks', 'SConscript'), exports=['env'])
stacks = SConscript(os.path.join('stacks', 'SConscript'), exports=['env'])
stacks_blocks = SConscript(os.path.join('stacks_blocks', 'SConscript'), exports=['env'])
symbols = SConscript(os.path.join('symbols', 'SConscript'), exports=['env'])

subs = [
    ('base', base),
    ('build_blocks', build_blocks),
    ('critical', critical),
    ('critical_blocks', critical_blocks),
    ('db', db),
    ('execution', execution),
    ('execution_blocks', execution_blocks),
    ('stacks', stacks),
    ('stacks_blocks', stacks_blocks),
    ('symbols', symbols),
]

sources = []
for directory, files in subs:
    sources += [os.path.join(directory, f) for f in files]

lib_env = env.Clone()
lib_env.ParseConfig('pkg-config --cflags glib-2.0')

tibeecomparelib = lib_env.StaticLibrary(target='tibeecomparelib', source=sources)

# Generate the executables.
build = SConscript(os.path.join('build', 'SConscript'),
                   exports=['env', 'tibeecomparelib'])
report = SConscript(os.path.join('report', 'SConscript'),
                    exports=['env', 'tibeecomparelib'])
test = SConscript(os.path.join('test', 'SConscript'),
                  exports=['env', 'tibeecomparelib'])

Return(['build',])
